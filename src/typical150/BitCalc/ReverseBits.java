package typical150.BitCalc;

//颠倒二进制位
/*颠倒给定的 32 位无符号整数的二进制位。
提示：
请注意，在某些语言（如 Java）中，没有无符号整数类型。在这种情况下，输入和输出都将被指定为有符号整数类型，
并且不应影响您的实现，因为无论整数是有符号的还是无符号的，其内部的二进制表示形式都是相同的。
在 Java 中，编译器使用二进制补码记法来表示有符号整数。因此，在 示例 2 中，输入表示有符号整数 -3，
输出表示有符号整数 -1073741825。
进阶: 如果多次调用这个函数，你将如何优化你的算法？*/
//java没有无符号整数,右移应该用无符号右移,逻辑右移
//方法一:逐位颠倒 n每次右移一位,每次除2 所以O(logn)
//位运算分治 逆天........ 左右分别翻转,然后合并
// 取出所有奇数位和偶数位；将奇数位移到偶数位上，偶数位移到奇数位上。1 2 4 8 16地反转
public class ReverseBits {
    public int reverseBits(int n) {
        //n&1 获取n的二进制的最后一位
        //<<(32-i)往左移动(31-i)位,分别31,30,29....
        //rev|=x rev=rev|x 因为x每次都只有一个有效的,其他都是0,而且每次的位置从左往右一个个移动,所以不会有1|1的情况
        int rev = 0;
        for (int i = 0; i < 32 && n != 0; i++) {
            rev = rev | (n & 1) << (31 - i);
            n >>>= 1;
        }
        return rev;
    }

    public int divideAndConquer(int n) {
        int M1 = 0x55555555; // 01010101010101010101010101010101
        int M2 = 0x33333333; // 00110011001100110011001100110011
        int M4 = 0x0f0f0f0f; // 00001111000011110000111100001111
        int M8 = 0x00ff00ff; // 00000000111111110000000011111111
        //n>>>1&M1 将偶数位移到奇数位,&M1 取出右移后的偶数位 此时偶数位都已经移动到奇数位了
        //n&M1取所有奇数位 <<1 左移1 放到偶数位
        n = n >>> 1 & M1 | (n & M1) << 1;

        //2长度的交换
        n = n >>> 2 & M2 | (n & M2) << 2;
        n = n >>> 4 & M4 | (n & M4) << 4;
        n = n >>> 8 & M8 | (n & M8) << 8;
        return n >>> 16 | n << 16;
    }
}
